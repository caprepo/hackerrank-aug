Question:1
==============
Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays in O(n). Make sure the time complexity is met.

Example 1:
Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.

Question:2
==============
Given two sorted arrays, the task is to merge them in a sorted manner .
Example:1
Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8}
Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

Example 2:
Input: arr1[] = { 3,7,9,12,21}, arr2[] = {6,8,15,18,27}
Output: arr3[] = {3,6,7,8,9,12,15,18,21,27}

Time complexity: O(n1+n2) where n1 and n2 are size of each array.

Question:3
==============
*Problem Statement:
*
*Given a list of Strings, and an external order in which it needs to be sorted, Sort the given list of *strings.
*
*For example:
*Input Strings :  ""Ajay"", ""Raja"", ""Keshav"", ""List"", ""Set"", ""Elephant"", ""Drone"",
*Sort order:  TESARDLK
*Sorted Strings: ""Elephant"", ""Set"",""Ajay"", ""Raja"", ""Drone"",""List"",""Keshav""

Question:4
==============
 * Given two strings check whehter they are anagrams or not. 
 *
 * Two strings are set to be anagram if they have same characters but in 
 * different order.
 * For example ""STOP"" and ""TOPS"" are set to be anagrams.
 *  ""DORMITORY"" and ""DIRTY ROOM"" are anagram
 * but ""STOP"" and ""POSE"" are NOT anagrams.
 *
 *
 * If you need more classes, simply define them inline.
